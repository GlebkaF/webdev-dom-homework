1.Поиск статичных элементов по id с помощью getElementById
Статичные элементы можно искать и другими методами: querySelector, querySelectorAll

const buttonElement = document.getElementById("add-button");
const listElement = document.getElementById("list");
const nameInputElement = document.getElementById("name-input");
const colorInputElement = document.getElementById("color-input");

2. Данные о студентах в JS-коде
const students = [
  {
    name: "Глеб",
    color: "#ff2600",
  },
];

3. Рендер-функция
const renderStudents = () => {
  // Преобразование данных в HTML-разметку с помощью map и join
  const studentsHtml = students
    .map((student, index) => {
      return '
      <li class="student" data-color="${student.color}">
        <p class="student-name">
          ${student.name}
        </p>
        <button data-index="${index}" class="button delete-button">Удалить</button>
      </li>';
    })
    .join("");

4. рендер HTML-строки в браузер
  listElement.innerHTML = studentsHtml;

5. поиск динамически создаваемых элементов разметки
  const deleteButtons = document.querySelectorAll(".delete-button");


6. добавление обработчиков клика на динамически созданные элементы
  for (const deleteButton of deleteButtons) {
    deleteButton.addEventListener("click", (event) => {
      // отключение всплытия у события через stopPropagation,
      // обработчики клика на родительских элементах не будут вызываться после отключения
      event.stopPropagation();

      // Получение значения из data-* атрибутов разметки 
      const index = deleteButton.dataset.index;


      // Удаляем студента из данных
      students.splice(index, 1);
      // делаем ререндер, чтобы после обновления данных обновить разметку
      renderStudents();
    });
  }
};

renderStudents();

buttonElement.addEventListener("click", () => {

  // Управляем классами на элементах с помощью classList
  nameInputElement.classList.remove("input-error");
  if (nameInputElement.value === "") {
    nameInputElement.classList.add("input-error");
    return;
  }

  // Добавляем нового студента в данные
  students.push({
    // Получаем значение из инпута через свойство value
    // Делаем HTML-строку безопасной для рендера, заменяя управляющие символы HTML на спец. символы
    name: nameInputElement.value
        .replaceAll("&", "&amp;")
        .replaceAll("<", "&lt;")
        .replaceAll(">", "&gt;")
        .replaceAll('"', "&quot;");
    color: colorInputElement.value,
  });


  // делаем ререндер, чтобы после обновления данных обновить разметку
  renderStudents();

  // Очищаем поле ввода имени, записывая в .value элемента пустую строку
  nameInputElement.value = "";
});

 

HTML
<body>
    <h1>Любимые цвета студентов</h1>
    <ul class="students" id="list">
      <!— Список рендерится из JS —>
    </ul>

    <div class="form">
      <h3 class="form-title">Форма добавления</h3>
      <div class="form-row">
        Имя:  
        <input
          type="text"
          id="name-input"
          class="input"
          placeholder="Василий"
        />
      </div>
      <div class="form-row">
        Цвет: 
        <input type="color" id="color-input" class="color-input input" />
        <br /><br />
      </div>
      <button class="button" id="add-button">Добавить</button>
    </div>
  </body>