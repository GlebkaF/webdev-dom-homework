import { getComments } from "./api.js";
const commentsElement = document.getElementById("comments");
const userNameElement = document.getElementById("userName");
const userCommentElement = document.getElementById("userComment");
const addCommentElement = document.getElementById("addComment");
const deleteCommentElement = document.getElementById("deleteComment");
const likeElement = document.getElementById("like");
const inputEnter = document.querySelector('.add-form');
const formElement = document.getElementById("form");
const timeLoadElement = document.getElementById("timeLoad");

let currentDate = new Date();
const shortDate = (value) => {
  let date = new Date(value);
  let month = date.getMonth();
  let min = date.getMinutes();
  let hours = date.getHours();
  if (month < 10) month = "0" + month;
  if (hours < 10) hours = "0" + hours;
  if (min < 10) min = "0" + min;
  return `${date.getDate()}.${month}.${date.getFullYear()-2000} ${hours}:${min}`;
}

let arrComments = [];
getComments();
getComments().then((response) => {
  timeLoadElement.style.display = "none"
});

const switchLike = () => {
  let byttonLike = document.querySelectorAll(".like-button");
  for (const button of byttonLike) {
    button.addEventListener("click", (event) => {
      event.stopPropagation();
      const index = button.dataset.index;
     button.classList.add("-loading-like");
      delay(2000).then(() => {
        if (arrComments[index].likeStatus === " -active-like") {
      arrComments[index].likeCounter -=1;
      arrComments[index].likeStatus = "";
      renderComments();
     } else {
      arrComments[index].likeCounter +=1;
      arrComments[index].likeStatus = " -active-like";
      renderComments();
     }
      });
    })
  }
  
}

const replyToComment = () => {
  const userCommentElement = document.getElementById("userComment");
  let comments = document.querySelectorAll(".comment");
  for (const comment of comments) {
    comment.addEventListener("click", () => {
      const userCommentElement = document.getElementById("userComment");
      const index = comment.dataset.index;
     userCommentElement.value = `QUOTE_BEGIN ${arrComments[index].name} - "${arrComments[index].text}"QUOTE_END`;
    })
  }
}

const renderComments = () => {
  let commentsHtml = arrComments.map((comment,index) => {
  return     `<li class="comment" data-index="${index}">
      <div class="comment-header">
        <div>${comment.name.replaceAll("<", "&lt;").replaceAll(">", "&gt;")}</div>
        <div>${comment.date}</div>
      </div>
      <div class="comment-body">
        <div class="comment-text">
          ${comment.text.replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("QUOTE_BEGIN", "<div class='comment-quote'>").replaceAll("QUOTE_END", "</div>")}
        </div>
      </div>
      <div class="comment-footer">
        <div class="edit">
            <button class="edit-button" data-index="${index}">Редактировать</button>
          </div>
        <div class="likes">
          <span class="likes-counter">${comment.likeCounter}</span>
          <button class="like-button${comment.likeStatus}" data-index="${index}"></button>
        </div>
      </div>
    </li>`;
})
commentsElement.innerHTML = commentsHtml.join("");

switchLike();
replyToComment();
}

function delay(interval = 300) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, interval);
  });
}

checkAndAdd();


document.getElementById("formContain").addEventListener("click", event => {
  if (event.target.className === "add-form-button") checkAndAdd();
});

inputEnter.addEventListener('keyup', function(event){
  if (event.key === "Enter") {
    checkAndAdd();
  }
});

deleteCommentElement.addEventListener("click", () => {
  commentsElement.removeChild(commentsElement.lastElementChild);
})